# Create base dependencies stage
FROM node:20-alpine AS deps

WORKDIR /app

# Install basic build tools
RUN apk add --no-cache python3 make g++

# Copy package.json files
COPY package.json ./
COPY apps/service-a/package.json ./apps/service-a/
COPY libs/common/package.json ./libs/common/

# Install dependencies
RUN npm install --legacy-peer-deps

# Build stage for JS files
FROM deps AS js-builder

WORKDIR /app

# Copy source files
COPY apps/service-a/tsconfig*.json ./apps/service-a/
COPY libs/common/tsconfig.json ./libs/common/
COPY libs/common/src ./libs/common/src
COPY apps/service-a/src ./apps/service-a/src

# Use service's tsconfig for build
COPY apps/service-a/tsconfig.json ./tsconfig.json

# Compile TypeScript to JavaScript
RUN npx tsc -p apps/service-a/tsconfig.build.json --noEmit false || true

# Create output directories in case compilation fails
RUN mkdir -p apps/service-a/dist/apps/service-a/src libs/common/dist/libs/common/src

# Production stage
FROM node:20-alpine

WORKDIR /app

# Create directories for data and uploads
RUN mkdir -p data uploads

# Copy only the compiled JavaScript
COPY --from=js-builder /app/apps/service-a/dist ./apps/service-a/dist
COPY --from=js-builder /app/libs/common/dist ./libs/common/dist

# Copy package.json files for production
COPY package.json ./
COPY apps/service-a/package.json ./apps/service-a/
COPY libs/common/package.json ./libs/common/

# Install production dependencies
RUN apk add --no-cache cairo pango jpeg giflib pixman freetype fontconfig && \
    npm install --production --no-optional --no-package-lock --force

# Set environment variables for service-a
ENV NODE_ENV=production
ENV PORT=3000
ENV MONGODB_URI=mongodb://mongodb:27017/microservices
ENV MONGODB_DB=microservices
ENV REDIS_URI=redis://redis:6379
ENV MQTT_URI=mqtt://mosquitto:1883

# Expose port
EXPOSE 3000

# Start service
CMD ["node", "apps/service-a/dist/apps/service-a/src/main.js"]
