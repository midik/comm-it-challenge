FROM node:20-alpine AS build

WORKDIR /app

# Install dependencies required for canvas
RUN apk add --no-cache \
    build-base \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    python3

# Copy package.json files
COPY package*.json ./
COPY apps/service-a/package*.json ./apps/service-a/
COPY libs/common/package*.json ./libs/common/

# Install dependencies
ENV CANVAS_PREBUILT=1
RUN npm install --legacy-peer-deps

# Copy source code
COPY libs/common ./libs/common
COPY apps/service-a ./apps/service-a

# Build the application
RUN npm run build:service-a

FROM node:20-alpine

WORKDIR /app

# Install dependencies required for canvas
RUN apk add --no-cache \
    cairo \
    jpeg \
    pango \
    giflib \
    pixman \
    libjpeg-turbo \
    freetype \
    fontconfig \
    python3

# Copy package.json files (use the production version)
COPY production-package.json ./package.json
COPY apps/service-a/package*.json ./apps/service-a/
COPY libs/common/package*.json ./libs/common/

# Install production dependencies only
ENV CANVAS_PREBUILT=1
ENV npm_config_build_from_source=false
RUN npm install --production --legacy-peer-deps --ignore-scripts

# Copy the build output
COPY --from=build /app/apps/service-a/dist ./apps/service-a/dist
COPY --from=build /app/libs/common/dist ./libs/common/dist

# Create necessary directories
RUN mkdir -p data uploads

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV MONGODB_URI=mongodb://mongodb:27017
ENV MONGODB_DB=microservices
ENV REDIS_URI=redis://redis:6379
ENV MQTT_URI=mqtt://mosquitto:1883

# Expose the service port
EXPOSE 3000

# Start the service
CMD ["node", "apps/service-a/dist/apps/service-a/src/main.js"]